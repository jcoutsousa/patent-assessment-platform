name: Secrets and Environment Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Validate environment configuration
  validate-environment:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'

    - name: Run environment validation (development)
      run: |
        python scripts/validate-env.py
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test_secret_key_minimum_32_characters_long
        JWT_SECRET_KEY: test_jwt_secret_key_minimum_32_chars
        REDIS_URL: redis://localhost:6379/0
        NEXT_PUBLIC_API_URL: http://localhost:8000
        ENVIRONMENT: development

  # Check for required production secrets
  check-production-secrets:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Check production secrets
      run: |
        echo "üîç Checking production secrets availability..."

        # List of required production secrets
        REQUIRED_SECRETS=(
          "OPENAI_API_KEY"
          "DATABASE_URL"
          "SECRET_KEY"
          "JWT_SECRET_KEY"
        )

        # List of recommended production secrets
        RECOMMENDED_SECRETS=(
          "REDIS_URL"
          "SENTRY_DSN"
          "SLACK_WEBHOOK_URL"
        )

        MISSING_REQUIRED=()
        MISSING_RECOMMENDED=()

        # Check required secrets
        for secret in "${REQUIRED_SECRETS[@]}"; do
          if [[ -z "${!secret}" ]]; then
            MISSING_REQUIRED+=("$secret")
          fi
        done

        # Check recommended secrets
        for secret in "${RECOMMENDED_SECRETS[@]}"; do
          if [[ -z "${!secret}" ]]; then
            MISSING_RECOMMENDED+=("$secret")
          fi
        done

        # Report results
        if [ ${#MISSING_REQUIRED[@]} -eq 0 ]; then
          echo "‚úÖ All required production secrets are configured"
        else
          echo "‚ùå Missing required production secrets:"
          printf '  - %s\n' "${MISSING_REQUIRED[@]}"
          echo ""
          echo "üîß Configure these secrets in GitHub repository settings:"
          echo "   Settings > Secrets and variables > Actions > Repository secrets"
          exit 1
        fi

        if [ ${#MISSING_RECOMMENDED[@]} -eq 0 ]; then
          echo "‚úÖ All recommended production secrets are configured"
        else
          echo "‚ö†Ô∏è  Missing recommended production secrets:"
          printf '  - %s\n' "${MISSING_RECOMMENDED[@]}"
          echo ""
          echo "Consider configuring these for full functionality"
        fi

      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Validate .env.example completeness
  validate-env-example:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check .env.example exists
      run: |
        if [[ ! -f .env.example ]]; then
          echo "‚ùå .env.example file is missing"
          exit 1
        fi
        echo "‚úÖ .env.example file exists"

    - name: Validate .env.example completeness
      run: |
        echo "üîç Checking .env.example completeness..."

        # Required variables that should be in .env.example
        REQUIRED_IN_EXAMPLE=(
          "OPENAI_API_KEY"
          "DATABASE_URL"
          "SECRET_KEY"
          "JWT_SECRET_KEY"
          "REDIS_URL"
          "NEXT_PUBLIC_API_URL"
          "ENVIRONMENT"
        )

        MISSING_FROM_EXAMPLE=()

        for var in "${REQUIRED_IN_EXAMPLE[@]}"; do
          if ! grep -q "^$var=" .env.example; then
            MISSING_FROM_EXAMPLE+=("$var")
          fi
        done

        if [ ${#MISSING_FROM_EXAMPLE[@]} -eq 0 ]; then
          echo "‚úÖ .env.example contains all required variables"
        else
          echo "‚ùå Missing variables in .env.example:"
          printf '  - %s\n' "${MISSING_FROM_EXAMPLE[@]}"
          exit 1
        fi

    - name: Check for secrets in .env.example
      run: |
        echo "üîç Checking for accidentally committed secrets in .env.example..."

        # Patterns that indicate real secrets (not placeholders)
        SECRET_PATTERNS=(
          "sk-[a-zA-Z0-9]{32,}"  # OpenAI API keys
          "postgres://[^:]+:[^@]+@[^/]+/"  # Real database URLs with credentials
          "[a-f0-9]{64}"  # 64-character hex strings (likely real secrets)
        )

        FOUND_SECRETS=()

        for pattern in "${SECRET_PATTERNS[@]}"; do
          if grep -qE "$pattern" .env.example; then
            FOUND_SECRETS+=("Pattern: $pattern")
          fi
        done

        if [ ${#FOUND_SECRETS[@]} -eq 0 ]; then
          echo "‚úÖ No real secrets found in .env.example"
        else
          echo "‚ö†Ô∏è  Potential real secrets found in .env.example:"
          printf '  - %s\n' "${FOUND_SECRETS[@]}"
          echo ""
          echo "Please ensure .env.example only contains placeholder values"
        fi

  # Generate secrets documentation
  generate-secrets-docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Generate secrets summary
      run: |
        echo "# Secrets Configuration Summary" > secrets-summary.md
        echo "" >> secrets-summary.md
        echo "Generated on: $(date)" >> secrets-summary.md
        echo "" >> secrets-summary.md

        echo "## Required Secrets for Production" >> secrets-summary.md
        echo "" >> secrets-summary.md
        echo "| Secret | Purpose | Status |" >> secrets-summary.md
        echo "|--------|---------|--------|" >> secrets-summary.md

        # Check each required secret
        SECRETS=(
          "OPENAI_API_KEY:OpenAI GPT-4 API access"
          "DATABASE_URL:PostgreSQL database connection"
          "SECRET_KEY:Session security"
          "JWT_SECRET_KEY:JWT token signing"
        )

        for secret_info in "${SECRETS[@]}"; do
          IFS=':' read -r secret_name secret_purpose <<< "$secret_info"
          if [[ -n "${!secret_name}" ]]; then
            echo "| $secret_name | $secret_purpose | ‚úÖ Configured |" >> secrets-summary.md
          else
            echo "| $secret_name | $secret_purpose | ‚ùå Missing |" >> secrets-summary.md
          fi
        done

        echo "" >> secrets-summary.md
        echo "## Setup Instructions" >> secrets-summary.md
        echo "" >> secrets-summary.md
        echo "1. **Local Development**: Run \`scripts/setup-env.sh\`" >> secrets-summary.md
        echo "2. **Production**: Configure secrets in GitHub repository settings" >> secrets-summary.md
        echo "3. **Validation**: Run \`python scripts/validate-env.py\`" >> secrets-summary.md
        echo "" >> secrets-summary.md
        echo "For detailed instructions, see \`docs/SECRETS_MANAGEMENT.md\`" >> secrets-summary.md

      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

    - name: Upload secrets summary
      uses: actions/upload-artifact@v4
      with:
        name: secrets-summary
        path: secrets-summary.md

  # Security audit for environment configuration
  security-audit:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Audit environment security
      run: |
        echo "üîí Running security audit on environment configuration..."

        # Check for common security issues
        ISSUES=()

        # Check if .env file is accidentally committed
        if [[ -f .env ]]; then
          ISSUES+=("‚ùå .env file is committed to repository (should be in .gitignore)")
        fi

        # Check if .gitignore contains .env
        if ! grep -q "^\.env$" .gitignore 2>/dev/null; then
          ISSUES+=("‚ö†Ô∏è  .env not in .gitignore")
        fi

        # Check for weak default values in .env.example
        if grep -q "password" .env.example; then
          ISSUES+=("‚ö†Ô∏è  Default password found in .env.example")
        fi

        if grep -q "secret" .env.example; then
          if grep -q "your.*secret.*here" .env.example; then
            echo "‚úÖ Placeholder secrets detected (good)"
          else
            ISSUES+=("‚ö†Ô∏è  Possible real secret in .env.example")
          fi
        fi

        # Report issues
        if [ ${#ISSUES[@]} -eq 0 ]; then
          echo "‚úÖ No security issues found in environment configuration"
        else
          echo "Found security issues:"
          printf '%s\n' "${ISSUES[@]}"

          # Only fail on critical issues (‚ùå)
          if printf '%s\n' "${ISSUES[@]}" | grep -q "‚ùå"; then
            exit 1
          fi
        fi

    - name: Check secrets documentation
      run: |
        if [[ ! -f docs/SECRETS_MANAGEMENT.md ]]; then
          echo "‚ùå Secrets management documentation is missing"
          echo "Create docs/SECRETS_MANAGEMENT.md with setup instructions"
          exit 1
        fi
        echo "‚úÖ Secrets management documentation exists"